<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <Button
        android:id="@+id/buttonStart"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Square Button"
        app:layout_constraintDimensionRatio="1:1"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <TextView
        android:id="@+id/textView1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginStart="8dp"
        android:layout_marginLeft="8dp"
        android:layout_marginTop="8dp"
        android:layout_marginEnd="8dp"
        android:layout_marginRight="8dp"
        android:background="#00F71A"
        android:text="This is TextView1.This is TextView1.This is TextView1."
        app:layout_constrainedWidth="true"
        app:layout_constraintEnd_toStartOf="@+id/buttonEnd"
        app:layout_constraintStart_toEndOf="@+id/buttonStart"
        app:layout_constraintTop_toTopOf="@+id/buttonStart" />

<!--
                            __About Constraints__
        1. With match constraint (android:layout_width="0dp"):
            a. Use layout_constraintWidth_min and layout_constraintWidth_max to control widgets's
            min and max width.
            b. Use layout_constraintWidth_percent (between 0 and 1, inclusive) to define widget's
            width in terms of percentage of parent's width. The attributes
            layout_constraintWidth_max can additionally be used to limit the max width.

        2. For a widget to respect it's start and end constraints, use one of these combinations:
            a. android:layout_width="wrap_content" and app:layout_constrainedWidth="true"
            b. android:layout_width="0dp"

        3. Use layout_constraintHorizontal_bias to change widget's affinity towards its start
        and end constraints (0 means next to start, 1 means next to end).
-->

<!--    TextView takes all the space available between the constraints-->
<!--    <TextView-->
<!--        android:id="@+id/textView1"-->
<!--        android:layout_width="0dp"-->
<!--        android:layout_height="wrap_content"-->
<!--        android:layout_marginStart="8dp"-->
<!--        android:layout_marginLeft="8dp"-->
<!--        android:layout_marginTop="8dp"-->
<!--        android:layout_marginEnd="8dp"-->
<!--        android:layout_marginRight="8dp"-->
<!--        android:background="#00F71A"-->
<!--        android:text="This is TextView1"-->
<!--        app:layout_constrainedWidth="true"-->
<!--        app:layout_constraintEnd_toStartOf="@+id/buttonEnd"-->
<!--        app:layout_constraintStart_toEndOf="@+id/buttonStart"-->
<!--        app:layout_constraintTop_toTopOf="@+id/buttonStart" />-->

<!--    TextView which wraps content but doesn't goes out of constraints-->
<!--    <TextView-->
<!--        android:id="@+id/textView2"-->
<!--        android:layout_width="wrap_content"-->
<!--        android:layout_height="wrap_content"-->
<!--        android:layout_marginStart="8dp"-->
<!--        android:layout_marginLeft="8dp"-->
<!--        android:layout_marginTop="8dp"-->
<!--        android:layout_marginEnd="8dp"-->
<!--        android:layout_marginRight="8dp"-->
<!--        android:background="#00F71A"-->
<!--        android:text="This is TextView2"-->
<!--        app:layout_constrainedWidth="true"-->
<!--        app:layout_constraintEnd_toStartOf="@+id/buttonEnd"-->
<!--        app:layout_constraintStart_toEndOf="@+id/buttonStart"-->
<!--        app:layout_constraintTop_toBottomOf="@+id/textView1" />-->

<!--    TextView wraps to content and aligns to the start-->
<!--    <TextView-->
<!--        android:id="@+id/textView3"-->
<!--        android:layout_width="wrap_content"-->
<!--        android:layout_height="wrap_content"-->
<!--        android:layout_marginStart="8dp"-->
<!--        android:layout_marginLeft="8dp"-->
<!--        android:layout_marginTop="8dp"-->
<!--        android:layout_marginEnd="8dp"-->
<!--        android:layout_marginRight="8dp"-->
<!--        android:background="#00F71A"-->
<!--        android:text="This is TextView3"-->
<!--        app:layout_constrainedWidth="true"-->
<!--        app:layout_constraintEnd_toStartOf="@+id/buttonEnd"-->
<!--        app:layout_constraintHorizontal_bias="0"-->
<!--        app:layout_constraintStart_toEndOf="@+id/buttonStart"-->
<!--        app:layout_constraintTop_toBottomOf="@+id/textView2" />-->

<!--    TextView wraps to content and may go out of the end constraint if content is too big-->
<!--    <TextView-->
<!--        android:id="@+id/textView4"-->
<!--        android:layout_width="wrap_content"-->
<!--        android:layout_height="wrap_content"-->
<!--        android:layout_marginStart="8dp"-->
<!--        android:layout_marginLeft="8dp"-->
<!--        android:layout_marginTop="8dp"-->
<!--        android:layout_marginEnd="8dp"-->
<!--        android:layout_marginRight="8dp"-->
<!--        android:background="#00F71A"-->
<!--        android:text="This is TextView4. This is TextView4. This is TextView4. "-->
<!--        app:layout_constraintEnd_toStartOf="@+id/buttonEnd"-->
<!--        app:layout_constraintHorizontal_bias="0"-->
<!--        app:layout_constraintStart_toEndOf="@+id/buttonStart"-->
<!--        app:layout_constraintTop_toBottomOf="@+id/textView3" />-->

    <Button
        android:id="@+id/buttonEnd"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginStart="8dp"
        android:layout_marginLeft="8dp"
        android:layout_marginTop="8dp"
        android:text="End"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>